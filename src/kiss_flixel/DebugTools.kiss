(var &mut :FlxActionDigital f1Action null)
(var &mut :FlxActionDigital f2Action null)

(function f1ToRecord [&opt :FlxActionManager _manager]
    (unless _manager
        (set _manager (new FlxActionManager))
        (set _manager.resetOnStateSwitch NONE))

    (doFor mightByManager (reverse FlxG.inputs.list)
        (when (Std.isOfType mightByManager FlxActionManager)
            (FlxG.inputs.remove mightByManager)))
    (FlxG.inputs.add _manager)
    (unless f1Action
        (set f1Action (new FlxActionDigital "Toggle OBS Recording"))
        (f1Action.addKey FlxKey.F1 JUST_PRESSED)
        (set f1Action.callback
            ->_ (if OBSTools.obsIsRecording
                        (OBSTools.stopObs)
                    (OBSTools.startObs))))
    (_manager.removeAction f1Action 0)
    (_manager.addAction f1Action))

(function f2ToLogSprites [&opt :FlxActionManager _manager]
    (unless _manager
        (set _manager (new FlxActionManager))
        (set _manager.resetOnStateSwitch NONE))

    (doFor mightByManager (reverse FlxG.inputs.list)
        (when (Std.isOfType mightByManager FlxActionManager)
            (FlxG.inputs.remove mightByManager)))
    (FlxG.inputs.add _manager)
    (unless f2Action
        (set f2Action (new FlxActionDigital "Log sprites and groups onscreen"))
        (f2Action.addKey FlxKey.F2 JUST_PRESSED)
        (set f2Action.callback
            ->_ (kiss_flixel.SpriteTools.logSprites)))
    (_manager.removeAction f2Action 0)
    (_manager.addAction f2Action))